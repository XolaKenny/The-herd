Healthcare Talking Chatbot Documentation
Overview
This guide explains how to build a Talking Healthcare Chatbot using Deep Learning. The chatbot diagnoses diseases based on user-input symptoms using machine learning models. It employs DecisionTreeClassifier and Support Vector Machine (SVM) classifiers to predict diseases and provide health advice, including severity assessments and precautions.

Prerequisites
●Basic understanding of Deep Learning
●Intermediate knowledge of Python
●Familiarity with Neural Networks
●Knowledge of the SpeechRecognition module and its setup

Step 1: Import Required Modules
First, import the necessary modules for the training process:

import random
import json
import pickle
import nltk
from nltk.stem import WordNetLemmatizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers import SGD
import numpy as np

Brief Explanation of Imported Modules:

●nltk (Natural Language Toolkit): Used for various Natural Language Processing (NLP) tasks.
●WordNetLemmatizer: A part of NLTK, used for lemmatizing words (grouping inflected forms to analyze them as a single item).
●Sequential: A simple model suitable for layers that have exactly one input and one output tensor.
●Dense, Activation, Dropout: Layers in a Neural Network; Dropout helps prevent overfitting by ignoring random neurons, and Activation decides which neurons will be activated.
●SGD (Stochastic Gradient Descent): An optimizer in Keras used to minimize the objective function during training.

Step 2: Load the Dataset
Next, load the dataset (a JSON file) structured as shown below:
{
    "intents": [
        {
            "tag": "Name of the Disease",
            "patterns": ["comma separated symptoms"],
            "responses": ["Answer the user will receive i.e. the disease the user might have"]
        },
        {
            "tag": "Name of the Disease 2",
            "patterns": ["comma separated symptoms"],
            "responses": ["Answer the user will receive i.e. the disease the user might have"]
        }
        // More entries...
    ]
}

Step 3: Tokenize and Process the Data
The next step involves tokenizing and processing the data. Separate the questions (symptoms) and answers (possible diseases) and create three key variables: words, classes, and documents.
lemmatizer = WordNetLemmatizer()
intents = json.loads(open("intents.json").read())

words = []
classes = []
documents = []
ignore_letters = ["?", "!", ".", ","]

for intent in intents["intents"]:
    for pattern in intent["patterns"]:
        word_list = nltk.word_tokenize(pattern)
        words.extend(word_list)
        documents.append((word_list, intent["tag"]))

        if intent["tag"] not in classes:
            classes.append(intent["tag"])

words = [lemmatizer.lemmatize(word) for word in words if word not in ignore_letters]
words = sorted(set(words))
classes = sorted(set(classes))

Step 4: Save Processed Data
Save the processed words and classes into pickle files for later use:
pickle.dump(words, open('words.pkl', 'wb'))
pickle.dump(classes, open('classes.pkl', 'wb'))

Step 5: Prepare Data for the Neural Network
Convert the data into numerical values to feed into the Neural Network. This includes creating a Bag of Words and defining training datasets.
dataset = []
template = [0] * len(classes)

for document in documents:
    bag = []
    word_patterns = document[0]
    word_patterns are [lemmatizer.lemmatize(word.lower()) for word in word_patterns]

    for word in words:
        bag.append(1) if word in word_patterns else bag.append(0)

    output_row = list(template)
    output_row[classes.index(document[1])] = 1
    dataset.append([bag, output_row])

random.shuffle(dataset)
dataset = np.array(dataset)

train_x = list(dataset[:, 0])
train_y = list(dataset[:, 1])

Step 6: Build and Train the Neural Network
Create a Sequential model and add layers to it. Compile the model using the SGD optimizer and train it with the prepared data.
model = Sequential()
model.add(Dense(256, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

sgd = SGD(learning_rate=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)
model.save("chatbot_model.h5", hist)
print("Done!")

Step 7: Implement Voice Interaction
Integrate voice recognition and text-to-speech capabilities to make the chatbot interactive. Use the SpeechRecognition and pyttsx3 libraries for this purpose.
import speech_recognition as sr
import pyttsx3
import time

def calling_the_bot(txt):
    global res
    predict = predict_class(txt)
    res = get_response(predict, intents)
    engine.say("Found it. From our Database we found that" + res)
    engine.runAndWait()
    print("Your Symptom was : ", text)
    print("Result found in our Database : ", res)

if __name__ == '__main__':
    print("Bot is Running")
    recognizer = sr.Recognizer()
    mic = sr.Microphone()
    engine = pyttsx3.init()
    rate = engine.getProperty('rate')
    engine.setProperty('rate', 175)
    volume = engine.getProperty('volume')
    engine.setProperty('volume', 1.0)
    voices = engine.getProperty('voices')

    engine.say("Hello user, I am Bagley, your personal Talking Healthcare Chatbot.")
    engine.runAndWait()
    engine.say("IF YOU WANT TO CONTINUE WITH MALE VOICE PLEASE SAY MALE. OTHERWISE SAY FEMALE.")
    engine.runAndWait()

    with mic as source:
        recognizer.adjust_for_ambient_noise(source, duration=0.2)
        audio = recognizer.listen(source)
        audio = recognizer.recognize_google(audio)
        if audio.lower() == "female":
            engine.setProperty('voice', voices[1].id)
            print("You have chosen to continue with Female Voice")
        else:
            engine.setProperty('voice', voices[0].id)
            print("You have chosen to continue with Male Voice")

    while True:
        with mic as symptom:
            print("Say Your Symptoms. The Bot is Listening")
            engine.say("You may tell me your symptoms now. I am listening")
            engine.runAndWait()
            try:
                recognizer.adjust_for_ambient_noise(symptom, duration=0.2)
                symp = recognizer.listen(symptom)
                text = recognizer.recognize_google(symp)
                engine.say("You said {}".format(text))
                engine.runAndWait()
                engine.say("Scanning our database for your symptom. Please wait.")
                engine.runAndWait()
                time.sleep(1)
                calling_the_bot(text)
            except sr.UnknownValueError:
                engine.say("Sorry, Either your symptom is unclear to me or it is not present in our database. Please Try Again.")
                engine.runAndWait()
                print("Sorry, Either your symptom is unclear to me or it is not present in our database. Please Try Again.")
            finally:
                engine.say("If you want to continue please say True otherwise say False.")
                engine.runAndWait()
                with mic as ans:
                    recognizer.adjust_for_ambient_noise(ans, duration=0.2)
                    voice = recognizer.listen(ans)
                    final = recognizer.recognize_google(voice)
                    if final.lower() == 'no' or final.lower() == 'please exit':
                        engine.say("Thank You. Shutting Down now.")
                        engine.runAndWait()
                        print("Bot has been stopped by the user")
                        exit(0)
This code sets up a voice-interactive healthcare chatbot that can listen to symptoms, predict possible diseases, and respond both in text and speech.
